import { PlayIcon } from "@heroicons/react/24/solid";
import { Pagination } from "@mantine/core";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useCallback, useEffect, useState } from "react";
import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import type { ArticleType, CategoryType } from "src/types";
import { PER_PAGE } from "@libs/constant";
import { pagesRange } from "@libs/function";
import { MainLayout } from "src/components/Layout/MainLayout";
import { ArticleCard } from "src/components/pages/article/ArticleCard";
import { newtClient } from "src/libs/newtClient";

type Props = {
  articles: ArticleType[];
  categories: CategoryType[];
  totalCount: number;
  pageRange: number;
};

const ArticlePage: NextPage<Props> = ({ articles, categories, pageRange }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const router = useRouter();

  useEffect(() => {
    setCurrentPage(Number(router.query.pageId));
  }, [router]);

  const handlePaginate = useCallback(
    (page: number) => {
      router.push(`/article/page/${page}`);
    },
    [router]
  );

  return (
    <>
      <Head>
        <title>Article Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MainLayout>
        <section className="mx-5 flex flex-col lg:mx-20">
          <div className="mb-20 flex flex-col-reverse lg:grid lg:grid-cols-6">
            <div className="hidden grid-rows-1 lg:col-span-1 lg:inline-block">
              <p className="mb-10 text-lg font-bold">記事カテゴリ</p>
              <div className="flex flex-col space-y-3">
                {categories.map((item) => (
                  <Link href={`/article/category/${item._id}/1`} key={item._id}>
                    <div className="flex items-center space-x-3 transition-transform hover:translate-x-1 hover:text-cyan-600">
                      <PlayIcon className="h-2" />
                      <p className="text-sm">{item.category}</p>
                    </div>
                  </Link>
                ))}
              </div>
            </div>

            <div className="grid-rows-5 lg:col-span-5">
              {articles.map((item) => {
                const { _id } = item;
                return (
                  <div key={_id}>
                    <ArticleCard {...item} />
                  </div>
                );
              })}
              <hr />
            </div>
          </div>
          <div className="mx-auto mb-20">
            <Pagination
              initialPage={1}
              total={pageRange}
              page={currentPage}
              color="cyan"
              radius="md"
              siblings={2}
              onChange={handlePaginate}
            />
          </div>
        </section>
      </MainLayout>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const { total } = await newtClient.getContents<ArticleType>({
    appUid: process.env.NEWT_ARTICLE_APP_UID,
    modelUid: process.env.NEWT_ARTICLE_UID,
    query: {
      select: ["_id"],
      limit: 1,
    },
  });

  // 全てのパスの配列を作成
  const numArray = pagesRange(1, Math.ceil(total / PER_PAGE));
  const paths = numArray.map((number) => `/article/page/${number}`);

  return { paths, fallback: "blocking" };
};

export const getStaticProps: GetStaticProps<Props> = async (ctx) => {
  if (!ctx.params) {
    return { notFound: true };
  }

  const { pageId } = ctx.params;

  const { items, total } = await newtClient.getContents<ArticleType>({
    appUid: process.env.NEWT_ARTICLE_APP_UID,
    modelUid: process.env.NEWT_ARTICLE_UID,
    query: {
      limit: PER_PAGE,
      skip: (Number(pageId) - 1) * PER_PAGE,
    },
  });

  const { items: categories } = await newtClient.getContents<CategoryType>({
    appUid: process.env.NEWT_ARTICLE_APP_UID,
    modelUid: process.env.NEWT_CATEGORY_UID,
    query: {
      select: ["_id", "category"],
    },
  });

  const numArray = pagesRange(1, Math.ceil(total / PER_PAGE));

  return {
    props: {
      articles: items,
      categories,
      totalCount: total,
      pageRange: numArray.length,
    },
  };
};

export default ArticlePage;
