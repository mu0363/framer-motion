import { zodResolver } from "@hookform/resolvers/zod";
import Head from "next/head";
import React from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { z } from "zod";
import { Layout } from "src/components/Layout";
import { TextItem } from "src/components/TextItem";

const schema = z.object({
  name: z.string().min(1, { message: "Required" }),
  email: z
    .string()
    .email({ message: "Invalid email" })
    .min(1, { message: "Required" }),
});

type Inputs = z.infer<typeof schema>;

const Contact = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>({ resolver: zodResolver(schema) });
  const onSubmit: SubmitHandler<Inputs> = (data) => console.info(data);

  return (
    <>
      <Head>
        <title>Contact Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <section className="mb-40 flex flex-col space-y-12">
          <div className="h-[320px]" />
          <TextItem text="CONTACT" />

          <form
            className="mt-8 w-full space-y-6 px-5 md:mx-auto xl:w-1/2"
            onSubmit={handleSubmit(onSubmit)}
          >
            <input type="hidden" name="remember" value="true" />
            <div className="-space-y-px rounded-md shadow-sm">
              <div>
                <label htmlFor="name">
                  お名前
                  <input
                    id="name"
                    className="relative block w-full appearance-none rounded-none rounded-t-md border border-gray-300 px-3 py-2 text-gray-900 placeholder:text-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                    placeholder="山田太郎"
                    {...register("name")}
                  />
                  {errors.name && <span>{errors.name.message}</span>}
                </label>
              </div>
              <div>
                <label htmlFor="email">
                  メールアドレス
                  <input
                    id="email"
                    className="relative block w-full appearance-none rounded-none rounded-b-md border border-gray-300 px-3 py-2 text-gray-900 placeholder:text-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                    placeholder="yamada@example.com"
                    {...register("email")}
                  />
                  {errors.email && <span>{errors.email.message}</span>}
                </label>
              </div>
            </div>

            <div>
              <button
                type="submit"
                className="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              >
                <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                  <svg
                    className="h-5 w-5 text-indigo-500 group-hover:text-indigo-400"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z"
                      clipRule="evenodd"
                    />
                  </svg>
                </span>
                送信
              </button>
            </div>
          </form>
        </section>
      </Layout>
    </>
  );
};

export default Contact;
